import logging
import os
from typing import List
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from sqlalchemy.orm import Session
from .database import SessionLocal
from .models import TodoItem

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TodoBot:
    def __init__(self, token: str):
        self.bot = telebot.TeleBot(token)
        self.user_states = {}  
       
        self.bot.message_handler(commands=['start'])(self.start)
        self.bot.callback_query_handler(func=lambda call: True)(self.button)
        self.bot.message_handler(func=lambda m: True)(self.add_task)
        
        logger.info("Bot initialized")

    def start(self, message: Message, edit_message: bool = False) -> None:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        user = message.from_user if hasattr(message, 'from_user') else message.message.from_user
        chat_id = message.chat.id if hasattr(message, 'chat') else message.message.chat.id
        
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data='add_task')],
            [InlineKeyboardButton("üìù –ú–æ–∏ –∑–∞–¥–∞—á–∏", callback_data='list_tasks')],
            [InlineKeyboardButton("‚ú® –û –±–æ—Ç–µ", callback_data='about')]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = f"üìù *–ü—Ä–∏–≤–µ—Ç, {user.first_name}!*\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π Todo –±–æ—Ç.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if edit_message:
            self.bot.edit_message_text(
                chat_id=chat_id,
                message_id=message.message.message_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            self.bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    
    def button(self, call: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        self.bot.answer_callback_query(call.id)
        
        match call.data:
            case 'add_task':
                self._add_task_handler(call)
            case 'list_tasks':
                self.list_tasks(call)
            case 'about':
                self._about_handler(call)
            case 'back':
                self.start(call, edit_message=True)
            case data if data.startswith('delete_task'):
                task_id = int(data.split()[1]) if len(data.split()) > 1 else None
                self.delete_task(call, task_id)
            case data if data.startswith('complete_task'):
                task_id = int(data.split()[1]) if len(data.split()) > 1 else None
                self.complete_task(call, task_id)
            case _:
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
                )
    
    def _add_task_handler(self, call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="‚úèÔ∏è *–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å:*\n\n–ü—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        self.user_states[call.from_user.id] = 'waiting_for_task'
    
    def _about_handler(self, call: CallbackQuery):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
        text = """
üåü *Todo Bot*\n
üìå –í–µ—Ä—Å–∏—è: 1.0
üìÖ –°–æ–∑–¥–∞–Ω: 2023
üõ† –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: –í–∞—à–µ –∏–º—è

üìù –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å!

üîπ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∏
üîπ –û—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
üîπ –£–¥–∞–ª—è–π—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ
"""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        
        self.bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    def add_task(self, message: Message) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
        if message.text.startswith('/') or message.from_user.id not in self.user_states:
            return
        
        task_text = message.text
        user_id = message.from_user.id
    
        db: Session = SessionLocal()
        try:
            new_task = TodoItem(user_id=user_id, task=task_text)
            db.add(new_task)
            db.commit()
       
            self.bot.delete_message(
                chat_id=message.chat.id,
                message_id=message.message_id
            )
       
            keyboard = [[InlineKeyboardButton("–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]]
            self.bot.send_message(
                chat_id=message.chat.id,
                text=f"‚úÖ *–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!*\n\n`{task_text}`",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            logger.info(f"User {user_id} added task: {task_text}")
        except Exception as e:
            db.rollback()
            self.bot.send_message(
                chat_id=message.chat.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏"
            )
            logger.error(f"Error adding task: {e}")
        finally:
            db.close()
            if user_id in self.user_states:
                del self.user_states[user_id]
    
    def list_tasks(self, call: CallbackQuery) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"""
        user_id = call.from_user.id
        db: Session = SessionLocal()
        
        try:
            tasks = db.query(TodoItem).filter(TodoItem.user_id == user_id).order_by(TodoItem.is_completed).all()
            
            if not tasks:
                self.bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
                )
                return
            
            message = "üìã *–¢–≤–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:*\n\n"
            keyboard = []
            
            for task in tasks:
                status = "‚úÖ" if task.is_completed else "üü°"
                message += f"{status} `{task.id}. {task.task}`\n"
                
                row = []
                if not task.is_completed:
                    row.append(InlineKeyboardButton(
                        f"‚úîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å {task.id}",
                        callback_data=f"complete_task {task.id}"
                    ))
                row.append(InlineKeyboardButton(
                    f"‚ùå –£–¥–∞–ª–∏—Ç—å {task.id}",
                    callback_data=f"delete_task {task.id}"
                ))
                keyboard.append(row)
           
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            logger.info(f"User {user_id} listed tasks")
        except Exception as e:
            self.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
            )
            logger.error(f"Error listing tasks: {e}")
        finally:
            db.close()
    
    def delete_task(self, call: CallbackQuery, task_id: int) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        user_id = call.from_user.id
        db: Session = SessionLocal()
        
        try:
            task = db.query(TodoItem).filter(
                TodoItem.id == task_id,
                TodoItem.user_id == user_id
            ).first()
            
            if task:
                task_text = task.task
                db.delete(task)
                db.commit()
                self.bot.answer_callback_query(
                    callback_query_id=call.id,
                    text=f"üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {task_text}",
                    show_alert=True
                )
                logger.info(f"User {user_id} deleted task {task_id}")
            else:
                self.bot.answer_callback_query(
                    callback_query_id=call.id,
                    text="‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    show_alert=True
                )
        except Exception as e:
            db.rollback()
            self.bot.answer_callback_query(
                callback_query_id=call.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
                show_alert=True
            )
            logger.error(f"Error deleting task: {e}")
        finally:
            db.close()
        
        self.list_tasks(call)
    
    def complete_task(self, call: CallbackQuery, task_id: int) -> None:
        """–û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π"""
        user_id = call.from_user.id
        db: Session = SessionLocal()
        
        try:
            task = db.query(TodoItem).filter(
                TodoItem.id == task_id,
                TodoItem.user_id == user_id
            ).first()
            
            if task:
                task_text = task.task
                task.is_completed = True
                db.commit()
                self.bot.answer_callback_query(
                    callback_query_id=call.id,
                    text=f"üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_text}",
                    show_alert=True
                )
                logger.info(f"User {user_id} completed task {task_id}")
            else:
                self.bot.answer_callback_query(
                    callback_query_id=call.id,
                    text="‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    show_alert=True
                )
        except Exception as e:
            db.rollback()
            self.bot.answer_callback_query(
                callback_query_id=call.id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏",
                show_alert=True
            )
            logger.error(f"Error completing task: {e}")
        finally:
            db.close()
        
        self.list_tasks(call)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("Starting bot polling...")
        self.bot.infinity_polling()